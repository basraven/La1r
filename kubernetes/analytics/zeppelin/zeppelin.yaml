---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zeppelin-server-conf
data:
  nginx.conf: |
    daemon off;
    worker_processes auto;
    events {
      worker_connections 1024;
    }
    http {
      map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
      }

      # first server block will be default. Proxy zeppelin server.
      server {
        listen 80;
        access_log /var/log/nginx-access.log ;
        location / {
          proxy_pass http://localhost:8080;
          proxy_set_header Host $host;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
          proxy_redirect http://localhost $scheme://SERVICE_DOMAIN;
        }
      }

      # match request domain [port]-[service].[serviceDomain]
      # proxy extra service such as spark-ui
      server {
        listen 80;
        access_log /var/log/nginx-access.log ;
        server_name "~(?<svc_port>[0-9]+)-(?<svc_name>[^.]*)\.(.*)";
        location / {
          resolver 127.0.0.1:53 ipv6=off;
          proxy_pass http://$svc_name.NAMESPACE.svc:$svc_port;
          proxy_set_header Host $host;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
          proxy_redirect http://localhost $scheme://SERVICE_DOMAIN;

          # redirect rule for spark ui. 302 redirect response misses port number of service domain
          proxy_redirect ~(http:[/]+[0-9]+[-][^-]+[-][^.]+)[^/]+(\/jobs.*) $1.SERVICE_DOMAIN$2;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zeppelin-server
  namespace: analytics
  labels:
    app: zeppelin-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zeppelin-server
  template:
    metadata:
      labels:
        task: zeppelin-server
        k8s-app: zeppelin-server
        app: zeppelin-server
    spec:
      containers:
      - name: zeppelin-server
        env:
          - name: POD_UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: ZEPPELIN_ADDR
            value: "0.0.0.0"
          - name: ZEPPELIN_PORT
            value: "8080"
          - name: SPARK_HOME
            value: "/opt/spark"
          - name: SPARK_MASTER
            value: "k8s://https://192.168.5.100:443"
          - name: PYSPARK_PYTHON
            value: python
          - name: PYSPARK_DRIVER_PYTHON
            value: python
          - name: ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE
            value: "basraven/spark:3.0.1"
          - name: ZEPPELIN_K8S_CONTAINER_IMAGE
            value: "basraven/zeppelin:0.9.1"
          - name: ZEPPELIN_DOCKER_CONTAINER_IMAGE
            value: "basraven/zeppelin:0.9.1"
          - name: ZEPPELIN_NOTEBOOK_DIR
            value: "/notebook"
          - name: SERVICE_DOMAIN
            value: zeppelin.bas
          - name: ZEPPELIN_SERVER_RPC_PORTRANGE
            value: "12320:12320"
          - name: zeppelin.k8s.namespace
            value: "analytics"
          # - name: spark.executor.instances
          #   value: "3"
        ports:
        - name: http-zep
          containerPort: 8080
        - name: http
          containerPort: 80
        - name: rpc
          containerPort: 12320
        image: basraven/zeppelin:0.9.1
        resources: {}
        volumeMounts:
          - name: zeppelin-notebooks-volume
            mountPath: /notebook 
      - name: zeppelin-server-gateway
        image: nginx:1.14.0
        command: ["/bin/sh", "-c"]
        env:
        - name: SERVICE_DOMAIN
          value: "zeppelin.bas"
        - name: NAMESPACE
          value: "analytics"
        args:
          - cp -f /tmp/conf/nginx.conf /etc/nginx/nginx.conf;
            sed -i -e "s/SERVICE_DOMAIN/$SERVICE_DOMAIN/g" /etc/nginx/nginx.conf;
            sed -i -e "s/NAMESPACE/$NAMESPACE/g" /etc/nginx/nginx.conf;
            cat /etc/nginx/nginx.conf;
            /usr/sbin/nginx
        volumeMounts:
          - name: nginx-conf
            mountPath: /tmp/conf
        lifecycle:
          preStop:
            exec:
              # SIGTERM triggers a quick exit; gracefully terminate instead
              command: ["/usr/sbin/nginx", "-s", "quit"]
      - name: dnsmasq  # nginx requires dns resolver for dynamic dns resolution
        image: "janeczku/go-dnsmasq:release-1.0.5"
        args:
          - --listen
          - "127.0.0.1:53"
          - --default-resolver
          - --append-search-domains
          - --hostsfile=/etc/hosts
          - --verbose
      volumes:
        - name: zeppelin-notebooks-volume
          persistentVolumeClaim:
            claimName: zeppelin-notebooks-claim
        - name: nginx-conf
          configMap:
            name: zeppelin-server-conf
            items:
            - key: nginx.conf
              path: nginx.conf
---
apiVersion: v1
kind: Service
metadata:
  name: zeppelin-server
  labels:
    app: zeppelin-server
  namespace: analytics
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  - name: rpc
    port: 12320
    protocol: TCP
    targetPort: 12320
  selector:
    app: zeppelin-server
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: zeppeliningress
  namespace: analytics
spec:
  rules:
  - host: zeppelin.bas
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: zeppelin-server
            port:
              number: 80