---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: consul-k8s
  namespace: dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: all-reader-services
  namespace: dns
rules:
- apiGroups: ["", "endpoints", "extensions", "apps"]
  resources: ["endpoints", "events", "namespaces", "nodes", "pods", "customresourcedefinitions",  "apiservices", "daemonsets", "deployments", "statefulsets", "events", "ingresses", "ingresses", "services"]
  verbs: ["get", "watch", "list"]
# - apiGroups: [""]
#   resources: ["services"]
#   verbs: ["get","watch","list"]
# - apiGroups: [""]
#   resources: ["pods"]
#   verbs: ["get","watch","list"]
# - apiGroups: ["extensions"]
#   resources: ["ingresses"]
#   verbs: ["get","watch","list"]
# - apiGroups: [""]
#   resources: ["nodes"]
#   verbs: ["get", "list","watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: consul-k8s-all-reader-services-role-binding
subjects:
- kind: ServiceAccount
  name: consul-k8s
  namespace: dns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: consul-k8s
  namespace: dns
spec:
  selector:
    matchLabels:
      app: consul-k8s
  template:
    metadata:
      labels:
        app: consul-k8s
    spec:
      serviceAccountName: consul-k8s
      containers:
        - name: consul-k8s
          image: "hashicorp/consul-k8s"
          command:
            - consul-k8s
          args:
            - sync-catalog
            - -to-consul=true
            - -to-k8s=false
            - -http-addr=http://consul-dns:8500
            - -allow-k8s-namespace=*
            - -deny-k8s-namespace=kube-system
            # - -allow-k8s-namespace=default
            # - -allow-k8s-namespace=kube-system

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: consul-ingresses-storage
  namespace: dns
spec:
  storageClassName: nfs-223 # SAME NAME AS THE STORAGECLASS
  accessModes:
    - ReadWriteMany #  must be the same as PersistentVolume
  resources:
    requests:
      storage: 50Mi
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: consul-k8s-ingress
  namespace: dns
spec:
  selector:
    matchLabels:
      app: consul-k8s-ingress
  template:
    metadata:
      labels:
        app: consul-k8s-ingress
    spec:
      serviceAccountName: consul-k8s
      restartPolicy: Always
      volumes:
      - name: consul-ingresses-storage-volume
        persistentVolumeClaim:
          claimName: consul-ingresses-storage
      containers:
        - name: consul-k8s-ingress
          image: "python"
          volumeMounts:
          - name: consul-ingresses-storage-volume
            mountPath: /ingresses
          command:
            - sh
          args:
            - "-c"
            - |
              GIT_SSH_COMMAND='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
              git clone -q https://github.com/basraven/consulk8s.git ;
              pip3 install ./consulk8s ;
              export K8S_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              export K8S_CA_AUTH="$(cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt | base64 -w 0 )"
              mkdir -p ~/.kube

              echo "apiVersion: v1
              kind: Config
              users:
              - name: svcs-acct-dply
                user:
                  token: $K8S_TOKEN
              clusters:
              - cluster:
                  certificate-authority-data: $K8S_CA_AUTH
                  token: $K8S_TOKEN
                  server: https://192.168.5.100:443
                name: self-hosted-cluster
              contexts:
              - context:
                  cluster: self-hosted-cluster
                  user: svcs-acct-dply
                name: svcs-acct-context
              current-context: svcs-acct-context
              " > ~/.kube/config
              
              while sleep 30; do consulk8s write-ingresses -s /ingresses/k8s_services.json ; done
              
              