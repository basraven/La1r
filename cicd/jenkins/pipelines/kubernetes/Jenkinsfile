pipeline{
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '3')
        disableResume()
    }

    parameters {
        
        booleanParam defaultValue: false, description: 'Perform newman tests', name: 'newman-tests'
        
        booleanParam defaultValue: false, description: 'Deploy network architecture', name: 'network-deploy'
        booleanParam defaultValue: false, description: 'Deploy Kubernetes Dashboard', name: 'dashboard-deploy'
        
    }

    agent {
        label '!windows'
    }
    
    environment {
        JUNIT_OUTPUT_DIR    = 'junit/'
        
    }
    
    stages {
        stage('Workspace Preparation') { // for display purposes
            steps{
                // Clean workspace
                cleanWs()

                // Get code from a GitHub repository
                checkout([$class: 'GitSCM', branches: [[name: '*/rick']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', noTags: true, reference: '', shallow: true], [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false, recursiveSubmodules: true, reference: '', shallow: true, trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/basraven/la1r.git']]])
                sh label: 'Create hosts', script: 'printf "[la1r]\n$os $hosts" > ./cicd/ansible/hosts'
                sh label: "Create ${JUNIT_OUTPUT_DIR}", script: "mkdir -p ${JUNIT_OUTPUT_DIR}"
                sh label: 'Copy ansible.cfg to /etc/ansible/ansible.cfg', script: 'mkdir -p /etc/ansible && cp -f ./cicd/ansible/config/ansible.cfg /etc/ansible/ansible.cfg'
            }
        }
        stage('Virtual Deployment') {
            steps{
                script {
                    deployKubernetes('virtual')
                }
            }
        }
        stage('Virtual Tests') {
            steps {
                script{
                    if("${newman-tests}" != "false"){
                        sh label: 'Execute Newman', 
                        script: '''mkdir -p ./newman ; 
                        cd ./newman ; 
                        npm install --prefix ./ newman ;
                        node ./node_modules/newman/bin/newman.js run ../cicd/jenkins/tests/newman/newman-ansible.json -e ../cicd/jenkins/tests/newman/environments/virtual.json --reporters cli,junit --reporter-junit-export ./newman-junit.xml'''
                    }
                }
            }
        }    
        stage('Metal Deployment') {
            steps{
                script {
                    deployKubernetes('metal')
                }
            }
        }    
        
        stage('Metal Tests') {
            steps{
                script{
                    if("${newman-tests}" != "false"){
                        sh label: 'Execute Newman', 
                        script: '''mkdir -p ./newman ; 
                        cd ./newman ; 
                        npm install --prefix ./ newman ;
                        node ./node_modules/newman/bin/newman.js run ../cicd/jenkins/tests/newman/newman-ansible.json -e ../cicd/jenkins/tests/newman/environments/virtual.json --reporters cli,junit --reporter-junit-export ./newman-junit.xml'''
                    }
                }
            }
        }    
    }
}

// Primary deployment function for virtual and metal
def deployKubernetes(String environment){
    echo 'Deploying Kubernetes Assets...'
    if("${network-deploy}" != "false"){
        networkDeploy(environment)
    }

}

// def network-deploy(String a) {
def networkDeploy(String environment) {
    echo 'Deploying on' + environment
    // - kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

    // - kubectl apply -f https://raw.githubusercontent.com/weaveworks/scope/master/examples/k8s/ns.yaml
    // - kubectl apply -f https://raw.githubusercontent.com/weaveworks/scope/master/examples/k8s/cluster-role-binding.yaml
    // - kubectl apply -f https://raw.githubusercontent.com/weaveworks/scope/master/examples/k8s/cluster-role.yaml
    // - kubectl apply -f https://raw.githubusercontent.com/weaveworks/scope/master/examples/k8s/deploy.yaml
    // # - kubectl apply -f https://raw.githubusercontent.com/weaveworks/scope/master/examples/k8s/ds.yaml # untaint for pi
    // - kubectl apply -f kube-system/weave-scope/ds.yaml
    // - kubectl apply -f https://raw.githubusercontent.com/weaveworks/scope/master/examples/k8s/probe-deploy.yaml
    // - kubectl apply -f https://raw.githubusercontent.com/weaveworks/scope/master/examples/k8s/psp.yaml
    // - kubectl apply -f https://raw.githubusercontent.com/weaveworks/scope/master/examples/k8s/sa.yaml
    // - kubectl apply -f https://raw.githubusercontent.com/weaveworks/scope/master/examples/k8s/svc.yaml
    // - kubectl apply -f kube-system/weave-scope/scope-ingress.yam
}