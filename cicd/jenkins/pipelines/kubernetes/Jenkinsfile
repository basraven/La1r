pipeline{
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '3')
        disableResume()
    }

    parameters {
        
        booleanParam defaultValue: false, description: 'Perform newman tests', name: 'newman-tests'
        
    }

    agent {
        label '!windows'
    }
    
    environment {
        JUNIT_OUTPUT_DIR    = 'junit/'
        
    }
    
    stages {
        stage('Workspace Preparation') { // for display purposes
            steps{
                // Clean workspace
                cleanWs()

                // Get code from a GitHub repository
                checkout([$class: 'GitSCM', branches: [[name: '*/rick']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', noTags: true, reference: '', shallow: true], [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false, recursiveSubmodules: true, reference: '', shallow: true, trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/basraven/la1r.git']]])
                sh label: 'Create hosts', script: 'printf "[la1r]\n$os $hosts" > ./cicd/ansible/hosts'
                sh label: "Create ${JUNIT_OUTPUT_DIR}", script: "mkdir -p ${JUNIT_OUTPUT_DIR}"
                sh label: 'Copy ansible.cfg to /etc/ansible/ansible.cfg', script: 'mkdir -p /etc/ansible && cp -f ./cicd/ansible/config/ansible.cfg /etc/ansible/ansible.cfg'
            }
        }
        stage('Virtual Deployment') {
            steps{
                script {
                    tags = sh(returnStdout: true, script: 'bash ./cicd/jenkins/pipelines/ansible/create-tags.sh').trim()
                }
                ansiblePlaybook colorized: true, disableHostKeyChecking: true, installation: 'ansible', inventory: 'cicd/ansible/hosts', extras: '--limit="virtual"' , playbook: 'cicd/ansible/site.yml', tags: "${tags}"    
                junit 'junit/site-*.xml' 
            }
        }
        stage('Virtual Tests') {
            steps {
                script{
                    if($newman-tests != false){
                        sh label: 'Execute Newman', 
                        script: '''mkdir -p ./newman ; 
                        cd ./newman ; 
                        npm install --prefix ./ newman ;
                        node ./node_modules/newman/bin/newman.js run ../cicd/jenkins/tests/newman/newman-ansible.json -e ../cicd/jenkins/tests/newman/environments/virtual.json --reporters cli,junit --reporter-junit-export ./newman-junit.xml'''
                    }
                }
            }
        }    
        stage('Metal Deployment') {
            steps{
                script {
                    tags = sh(returnStdout: true, script: 'bash ./cicd/jenkins/pipelines/ansible/create-tags.sh').trim()
                }
                ansiblePlaybook colorized: true, disableHostKeyChecking: true, installation: 'ansible', inventory: 'cicd/ansible/hosts', extras: '--limit="metal"' , playbook: 'cicd/ansible/site.yml', tags: "${tags}"    
                junit 'junit/site-*.xml' 
            }
        }    
        
        stage('Metal Tests') {
            steps{
                script{
                    if("${newman-tests}" != false){
                        sh label: 'Execute Newman', 
                        script: '''mkdir -p ./newman ; 
                        cd ./newman ; 
                        npm install --prefix ./ newman ;
                        node ./node_modules/newman/bin/newman.js run ../cicd/jenkins/tests/newman/newman-ansible.json -e ../cicd/jenkins/tests/newman/environments/virtual.json --reporters cli,junit --reporter-junit-export ./newman-junit.xml'''
                    }
                }
            }
        }    
    }
}